package org.alcaudon.core

// -- AutoGenerated --

import scala.collection.JavaConversions._
import scala.concurrent.duration.Duration

import java.util.concurrent.TimeUnit.NANOSECONDS

class SettingsDefinition(config: com.typesafe.config.Config) {

  def getStringList(path: String) = config.getStringList(path).toList

  def getDuration(path: String) =
    Duration.fromNanos(config.getDuration(path, NANOSECONDS))

  object blob {
    final lazy val bucket = config.getString("alcaudon.blob.bucket")
    final lazy val directory = config.getString("alcaudon.blob.directory")
    final lazy val downloadTimeout = getDuration(
      "alcaudon.blob.download-timeout")

    object s3 {
      final lazy val accessKey =
        config.getString("alcaudon.blob.s3.access-key")
      final lazy val region = config.getString("alcaudon.blob.s3.region")
      final lazy val secretKey =
        config.getString("alcaudon.blob.s3.secret-key")
    }

  }

  object clustering {
    final lazy val connectionTimeout = getDuration(
      "alcaudon.clustering.connection-timeout")
    final lazy val maxRetries =
      config.getInt("alcaudon.clustering.max-retries")
  }

  object computation {
    final lazy val bloomFilterRecords =
      config.getInt("alcaudon.computation.bloom-filter-records")
    final lazy val distributed =
      config.getBoolean("alcaudon.computation.distributed")
    final lazy val maxFailures =
      config.getInt("alcaudon.computation.max-failures")
    final lazy val snapshotInterval =
      config.getInt("alcaudon.computation.snapshot-interval")
    final lazy val timeout = getDuration("alcaudon.computation.timeout")
  }

  final lazy val consistencyConstraint =
    config.getString("alcaudon.consistency-constraint")

  object streams {

    object flowControl {
      final lazy val backoffTime = getDuration(
        "alcaudon.streams.flow-control.backoff-time")
      final lazy val overwhelmedDelay =
        config.getInt("alcaudon.streams.flow-control.overwhelmed-delay")
      final lazy val overwhelmedRetryTime = getDuration(
        "alcaudon.streams.flow-control.overwhelmed-retry-time")
    }

    final lazy val snapshotInterval =
      config.getInt("alcaudon.streams.snapshot-interval")
  }

}
