akka {
  loglevel = "INFO"
  stdout-loglevel = "INFO"

  actor {

    deployment {
      computation-dispatcher {
        type = Dispatcher
        executor = "fork-join-executor"
        fork-join-executor {
          parallelism-min = 8
          parallelism-factor = 3.0
          parallelism-max = 64
        }
        throughput = 50
      }
    }

    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
      gwatermark = "org.alcaudon.runtime.GWatermarkSerializer"
    }


    serialization-bindings {
      "org.alcaudon.core.RawStreamRecord" = kryo
      "org.alcaudon.core.AlcaudonStream$Subscribe" = kryo
      "org.alcaudon.core.AlcaudonStream$ACK" = kryo
      "org.alcaudon.core.StreamState" = kryo
      "org.alcaudon.core.State$SetValue" = kryo
      "org.alcaudon.core.State$SetTimer" = kryo
      "org.alcaudon.core.State$Transaction" = kryo
      "org.alcaudon.runtime.ComputationReifier$ComputationState" = kryo
      "org.alcaudon.runtime.GWatermark" = gwatermark
      "org.alcaudon.core.sources.TwitterSource" = kryo
      "org.alcaudon.clustering.Coordinator$Protocol$CreateDataflowPipeline" = kryo
      "org.alcaudon.core.DataflowGraph" = kryo
      "org.alcaudon.core.KeyExtractor" = kryo
      "org.alcaudon.api.DataflowBuilder$AlcaudonInputStream" = kryo
      "org.alcaudon.api.DataflowNodeRepresentation$DataflowNodeRepresentation" = kryo
      "org.alcaudon.api.DataflowNodeRepresentation$ComputationRepresentation" = kryo
      "org.alcaudon.api.DataflowNodeRepresentation$StreamRepresentation" = kryo
      "org.alcaudon.api.DataflowNodeRepresentation$SourceRepresentation" = kryo
      "org.alcaudon.api.DataflowNodeRepresentation$SinkRepresentation" = kryo
    }

    kryo  {
      type = "graph"
      idstrategy = "default"
      buffer-size = 4096
      max-buffer-size = -1
      use-manifests = true
      use-unsafe = false
      post-serialization-transformations = "off"
      implicit-registration-logging = true
      kryo-trace = false
      resolve-subclasses = false
      classes = [
      "org.alcaudon.core.RawStreamRecord",
      "org.alcaudon.core.AlcaudonStream$Subscribe",
      "org.alcaudon.core.AlcaudonStream$ACK",
      "org.alcaudon.core.StreamState",
      "org.alcaudon.core.State$SetValue",
      "org.alcaudon.core.State$SetTimer",
      "org.alcaudon.core.State$Transaction",
      "org.alcaudon.runtime.ComputationReifier$ComputationState",
      "org.alcaudon.core.sources.TwitterSource",
      "org.alcaudon.clustering.Coordinator$Protocol$CreateDataflowPipeline",
      "org.alcaudon.core.DataflowGraph",
      "org.alcaudon.core.KeyExtractor",
      "org.alcaudon.api.DataflowBuilder$AlcaudonInputStream",
      "org.alcaudon.api.DataflowNodeRepresentation$DataflowNodeRepresentation",
      "org.alcaudon.api.DataflowNodeRepresentation$ComputationRepresentation",
      "org.alcaudon.api.DataflowNodeRepresentation$StreamRepresentation",
      "org.alcaudon.api.DataflowNodeRepresentation$SourceRepresentation",
      "org.alcaudon.api.DataflowNodeRepresentation$SinkRepresentation"
      ]
    }
  }

  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]

}

alcaudon {
  computation {
    distributed = false
    distributed = ${?DISTRIBUTED}
    parallelism = 2
    timeout = 600s
    max-failures = 12
    bloom-filter-records = 10000
    snapshot-interval = 10000
    max-failures = 12
  }

  clustering {
    max-retries = 3
    connection-timeout = 15s
  }

  streams {
    flow-control {
      backoff-time = 5s
      overwhelmed-retry-time = 8s
      overwhelmed-delay = 100
    }
    snapshot-interval = 10000
  }

  firmament {
    address = "localhost"
    address = ${?FIRMAMENT_HOST_NAME}
    port = 9200
    port = ${?FIRMAMENT_PORT}
  }

  consistency-constraint = "HIGH"
  blob {
    directory = "/tmp/alcaudon"
    download-timeout = 1h
    bucket = "alcaudon-libraries"
    s3 {
      access-key = "access-key"
      access-key = ${?S3_ACCESS_KEY}
      secret-key = "access-secret"
      secret-key = ${?S3_SECRET_KEY}
      region = "us-east-1"
    }
  }
}

cassandra-snapshot-store.contact-points = ["127.0.0.1"]
cassandra-snapshot-store.contact-points = [${?CASSANDRA_HOSTS}]
cassandra-snapshot-store.port = 9042
cassandra-snapshot-store.port = ${?CASSANDRA_PORT}

cassandra-journal.contact-points = ["127.0.0.1"]
cassandra-journal.contact-points = [${?CASSANDRA_HOSTS}]
cassandra-journal.port = 9042
cassandra-journal.port = ${?CASSANDRA_PORT}